<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Animated 3D Solar System</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background-color: black;
    }
  </style>
</head>
<body>
  <script>
    // Scene, Camera, Renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 5000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Lighting
    const pointLight = new THREE.PointLight(0xffffff, 3, 4000); // Intense light for the Sun
    pointLight.position.set(0, 0, 0);
    scene.add(pointLight);

    const ambientLight = new THREE.AmbientLight(0x404040, 0.8); // Softer ambient light
    scene.add(ambientLight);

    // Texture Loader
    const textureLoader = new THREE.TextureLoader();

    // Starry Background
    function createStars() {
      const starGeometry = new THREE.BufferGeometry();
      const starMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 1 });

      const starVertices = [];
      for (let i = 0; i < 10000; i++) {
        const x = (Math.random() - 0.5) * 5000;
        const y = (Math.random() - 0.5) * 5000;
        const z = (Math.random() - 0.5) * 5000;
        starVertices.push(x, y, z);
      }
      starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
      const stars = new THREE.Points(starGeometry, starMaterial);
      scene.add(stars);
    }
    createStars();

    // Sun with Glow
    const sunGeometry = new THREE.SphereGeometry(30, 64, 64);
    const sunMaterial = new THREE.MeshBasicMaterial({
      map: textureLoader.load('./2k_sun.jpg'), // Replace with your local path
    });
    const sun = new THREE.Mesh(sunGeometry, sunMaterial);
    scene.add(sun);

    // Sun Glow Effect
    const sunGlowGeometry = new THREE.SphereGeometry(38, 32, 32); // Larger radius for glow
    const sunGlowMaterial = new THREE.ShaderMaterial({
      uniforms: {
        viewVector: { type: 'v3', value: camera.position },
        c: { type: 'f', value: 0.5 },
        p: { type: 'f', value: 6 }, // Adjust for a softer glow
        glowColor: { type: 'c', value: new THREE.Color(0xffaa00) }, // Intense orange glow
      },
      vertexShader: `
        uniform vec3 viewVector;
        uniform float c;
        uniform float p;
        varying float intensity;
        void main() {
          vec3 vNormal = normalize(normalMatrix * normal);
          vec3 vNormView = normalize(viewVector - modelViewMatrix * vec4(position, 1.0)).xyz;
          intensity = pow(c - dot(vNormal, vNormView), p);
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        uniform vec3 glowColor;
        varying float intensity;
        void main() {
          gl_FragColor = vec4(glowColor, intensity);
        }
      `,
      side: THREE.BackSide,
      blending: THREE.AdditiveBlending,
      transparent: true,
    });
    const sunGlow = new THREE.Mesh(sunGlowGeometry, sunGlowMaterial);
    scene.add(sunGlow);

    // Animate Glow Effect with GSAP
    gsap.to(sunGlow.scale, {
      x: 1.1,
      y: 1.1,
      z: 1.1,
      duration: 2,
      repeat: -1,
      yoyo: true,
      ease: "power1.inOut"
    });

    // Animate Sun Scaling for a Pulsating Effect
    gsap.to(sun.scale, {
      x: 1.05,
      y: 1.05,
      z: 1.05,
      duration: 2,
      repeat: -1,
      yoyo: true,
      ease: "power1.inOut"
    });

    // Planets Data
    const planets = [
      { name: 'Mercury', texture: './2k_mercury.jpg', size: 3, distance: 60, speed: 0.02 },
      { name: 'Venus', texture: './2k_venus_surface.jpg', size: 5, distance: 90, speed: 0.015 },
      { name: 'Earth', texture: './2k_earth_daymap.jpg', size: 6, distance: 130, speed: 0.01 },
      { name: 'Mars', texture: './2k_mars.jpg', size: 4.5, distance: 180, speed: 0.008 },
      { name: 'Jupiter', texture: './2k_jupiter.jpg', size: 12, distance: 250, speed: 0.005 },
      { name: 'Saturn', texture: './2k_saturn.jpg', size: 10, distance: 320, speed: 0.004, ring: true },
      { name: 'Uranus', texture: './2k_uranus.jpg', size: 8, distance: 400, speed: 0.003 },
      { name: 'Neptune', texture: './2k_neptune.jpg', size: 7.5, distance: 480, speed: 0.002 },
    ];

    // Create Planets
    const planetMeshes = planets.map((planet) => {
      const geometry = new THREE.SphereGeometry(planet.size, 32, 32);
      const material = new THREE.MeshStandardMaterial({
        map: textureLoader.load(planet.texture),
      });
      const mesh = new THREE.Mesh(geometry, material);

      // Add Rings for Saturn
      if (planet.ring) {
        const ringGeometry = new THREE.RingGeometry(planet.size + 2, planet.size + 4, 64);
        const ringMaterial = new THREE.MeshBasicMaterial({
          map: textureLoader.load('./saturn_ring.png'),
          side: THREE.DoubleSide,
          transparent: true,
        });
        const ring = new THREE.Mesh(ringGeometry, ringMaterial);
        ring.rotation.x = Math.PI / 2;
        mesh.add(ring);
      }

      mesh.orbitRadius = planet.distance;
      mesh.orbitSpeed = planet.speed;
      mesh.orbitAngle = Math.random() * Math.PI * 2;

      scene.add(mesh);
      return mesh;
    });

    // GSAP Animation for Orbits
    gsap.ticker.add(() => {
      planetMeshes.forEach((planet) => {
        planet.orbitAngle += planet.orbitSpeed;
        planet.position.x = Math.cos(planet.orbitAngle) * planet.orbitRadius;
        planet.position.z = Math.sin(planet.orbitAngle) * planet.orbitRadius;
        planet.rotation.y += 0.01;
      });
    });

    // Camera Controls
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    camera.position.set(0, 200, 800);

    // Animation Loop
    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }
    animate();

    // Handle Resize
    window.addEventListener('resize', () => {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    });
  </script>
</body>
</html>
